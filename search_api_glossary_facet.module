<?php

// TODO: port to d8
/**
 * Implements hook_facetapi_filters().
 */
function search_api_glossary_facetapi_filters() {
  return array(
    'glossary_rewrite_items' => array(
      'handler' => array(
        'label' => t('Rewrite facet items to pad out missing alpha'),
        'class' => 'SearchApiGlossaryRewriteItems',
        'query types' => array('term', 'date'),
      ),
    ),
  );
}



// TODO: port to d8
class SearchApiGlossaryRewriteItems extends FacetapiFilter {

  /**
   * Filters facet items.
   */
  public function execute(array $build) {
    // Pad the items out for missing alphabets.
    $this->padListItems($build);
    return $build;
  }


  /**
   * Pads the array to add missing items.
   *
   * @param array $build
   *   The facet's render array.
   *
   * @return array
   *   The "items" parameter for theme_item_list().
   */
  public function padListItems(&$build) {
    $glossary_array = range('A', 'Z');
    $glossary_array[] = "#";
    $glossary_array[] = "0-9";

    foreach ($glossary_array as $key) {
      if (!array_key_exists($key, $build)) {
        if(!isset($build[$key]['#active'])){
          $build[$key]['#active'] = FALSE;
        }
        $build[$key]['#markup'] = $key;
        $build[$key]['#indexed_value'] = $key;
        $build[$key]['#count'] = 0;
      }
    }

    return $build;
  }

}



// TODO: port to d8
/**
 * Implements hook_facetapi_widgets().
 */
function search_api_glossary_facetapi_widgets() {
  return array(
    'search_api_glossary' => array(
      'handler' => array(
        'label' => t('Glossary AZ'),
        'class' => 'SearchApiGlossaryWidget',
        'query types' => array('term', 'date'),
      ),
    ),
  );
}


// TODO: port to d8
class SearchApiGlossaryWidget extends FacetapiWidgetLinks {

  /**
   * Renders the links.
   */
  public function execute() {
    $element = &$this->build[$this->facet['field alias']];
    $total_count = 0;
    foreach ($element as &$e) {
      // Tally up the total hits for the "All" tab.
      $total_count += $e['#count'];

      if (isset($e['#active']) && $e['#active']) {
        $active = $e;
      }else{
        $e['#active'] = FALSE;
      }

      // For each link, drop any active facet that isn't defined by the
      // link itself. In effect, only the filter defined by the current
      // link is active.
      if (isset($e['#query']['f']) && is_array($e['#query']['f'])) {
        foreach ($e['#query']['f'] as $key => $value) {
          $temp = explode(':', $value);
          if ($temp[0] == $this->facet['field alias'] && $temp[1] != $e['#indexed_value']) {
            unset($e['#query']['f'][$key]);
          }
        }
      }
    }

    if ($this->settings->settings['show_all']) {
      // Create the "All" item using the last looped filter as the base.
      $all = isset($active) ? $active : $e;
      $all['#markup'] = t('All');
      $all['#count'] = $total_count;
      $all['#active'] = isset($active) ? FALSE : TRUE;
      $all['#path'] = isset($active) ? $all['#path'] : current_path();

      if (isset($all['#query']['f']) && is_array($all['#query']['f'])) {
        foreach ($all['#query']['f'] as $key => $value) {
          $temp = explode(':', $value);
          if ($temp[0] == $this->facet['field alias']) {
            unset($all['#query']['f'][$key]);
          }
        }
      }

      // Add our new tab to the beginning of the list.
      array_unshift($element, $all);
    }

    // Sets each item's theme hook, builds item list.
    $this->setThemeHooks($element);

    $attributes = $this->build['#attributes'];
    $attributes['class'][] = 'tabs';

    $element = array(
      '#theme' => 'item_list',
      '#items' => $this->buildListItems($element),
      '#attributes' => $attributes,
    );
  }


  /**
   * Converts the render array for passing to theme_item_list().
   *
   * @param array $build
   *   The facet's render array.
   *
   * @return array
   *   The "items" parameter for theme_item_list().
   */
  public function buildListItems($build) {
    $items = array();

    foreach ($build as $value => $item) {
      $row = array('class' => array());

      if(!isset($item['#active'])){
        $item['#active'] = FALSE;
      }
      // Initializes variables passed to theme hook.
      $variables = array(
        'text' => $item['#markup'],
        'path' => (isset($item['#path'])? $item['#path'] : current_path()),
        'options' => array(
          'attributes' => array('class' => $this->getItemClasses()),
          'html' => (isset($item['#html'])? $item['#html'] : FALSE),
          'query' => (isset($item['#query'])? $item['#query'] : array()),
        ),
      );

      $display_count = $this->settings->settings['show_count'];

      // Pass the display count setting
      $variables['display_count'] = $display_count;
      $variables['count'] = $item['#count'];

      // If the item has no children, it is a leaf.
      if (empty($item['#item_children'])) {
        $row['class'][] = 'leaf';
      }
      else {
        // If the item is active or the "show_expanded" setting is selected,
        // show this item as expanded so we see its children.
        if ($item['#active'] || !empty($this->settings->settings['show_expanded'])) {
          $row['class'][] = 'expanded';
          $row['children'] = $this->buildListItems($item['#item_children']);
        }
        else {
          $row['class'][] = 'collapsed';
        }
      }

      // Gets theme hook, adds last minute classes.
      if ($item['#active']) {
        $class = 'facetapi-tabs-active active';
        $item['#theme'] = 'search_api_glossary_facetapi_link_active_v2';
        $row['class'][] = 'active';
      }
      else {
        $class = 'facetapi-tabs-inactive inactive';
        $item['#theme'] = 'search_api_glossary_facetapi_link_inactive_v2';
      }

      // Add class is the facet is empty.
      if ($item['#count'] == 0) {
        $row['class'][] = 'no-content';
      }

      $variables['options']['attributes']['class'][] = $class;

      // Themes the link, adds row to items.
      $row['data'] = theme($item['#theme'], $variables);
      $items[] = $row;

    }

    return $items;
  }




}



// TODO: port to d8
/**
 * Implements hook_theme().
 */
function search_api_glossary_theme() {
  return array(
    'search_api_glossary_facetapi_link_inactive_v2' => array(
      'variables' => array(),
      'file' => 'search_api_glossary.theme.inc',
    ),
    'search_api_glossary_facetapi_link_active_v2' => array(
      'variables' => array(),
      'file' => 'search_api_glossary.theme.inc',
    ),
  );
}
