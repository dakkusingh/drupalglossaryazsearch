<?php


/**
 * Implements hook_entity_property_info() on top of node module.
 *
 * @see entity_entity_property_info()
 */
function search_api_glossary_entity_property_info() {
  $info = array();
  
  // Add meta-data about the basic node properties.
  $properties = &$info['node']['properties'];

  $properties['title_az_glossary'] = array(
    'label' => t("Title A-Z Glossary"),
    'type' => 'text',
    'description' => t("The A-Z Glossary from title of the node."),
    'getter callback' => 'search_api_glossary_title_getter_callback',
    'schema field' => 'az_title',
    'sanitized' => TRUE,
  );

  $properties['name_az_glossary'] = array(
    'label' => t("Author Name A-Z Glossary"),
    'type' => 'text',
    'description' => t("The A-Z Glossary from Author Name of the node."),
    'getter callback' => 'search_api_glossary_name_getter_callback',
    'schema field' => 'az_name',
    'sanitized' => TRUE,
  );

  return $info;
}


/**
 * Getter callback for title_az_glossary property.
 */
function search_api_glossary_title_getter_callback($node, $name) {
  // TODO: remove hardcoded node title field and expose this as a setting  
  $first_letter = strtoupper($node->title[0]);
  $key = search_api_glossary_getter_helper($first_letter);
  return $key;
}


/**
 * Getter callback for name_az_glossary property.
 */
function search_api_glossary_name_getter_callback($node, $name) {
  // TODO: remove hardcoded field name and expose this as a setting    
  $first_letter = strtoupper($node->name[0]);
  $key = search_api_glossary_getter_helper($first_letter);
  return $key;
}


/**
 * Getter Helper for Alpha Numeric Keys
 */
function search_api_glossary_getter_helper($first_letter) {
  $letters_array = range('A', 'Z');
  $numbers_array = range(0, 9);
  
  $key = "";
  
  // it is alpha?
  if (ctype_alpha($first_letter)) {
    $key = $first_letter;
  }
  // is it a number
  elseif (ctype_digit($first_letter)) {
    $key = "0-9";
  }
  // catch all
  else {
    $key = "#";
  }
  
  return $key;
}


/**
 * Facet API "alter callback" that pads the glossary when there are no results
 * displayed when the facet is rendered.
 */
function search_api_glossary_facet_strip_facet_count(&$build, FacetapiAdapter $adapter, array $facet) {
  $glossary_array = array();
  $glossary_array = range('A', 'Z');
  $glossary_array[] = "#";
  $glossary_array[] = "0-9";
  
  foreach ($glossary_array as $key) {
    if(!array_key_exists($key, $build)){
      $build[$key]['#count'] = NULL;
    }
  }
  
  /*
  foreach ($build as $facet_name => $facet_data) {
    //$build[$facet_name]['#count'] = NULL;
  }*/
  
}


/**
 * Implements hook_facetapi_facet_info_alter().
 */
function search_api_glossary_facetapi_facet_info_alter(array &$facet_info, array $searcher_info) {
  if ($searcher_info['adapter'] == 'search_api' && isset($searcher_info['types']['node'])) {
    $facet_info['title_az_glossary']['alter callbacks'][] = 'search_api_glossary_facet_strip_facet_count';
    $facet_info['name_az_glossary']['alter callbacks'][] = 'search_api_glossary_facet_strip_facet_count';
  }
}