<?php
/**
 * @file
 * Search api glossary module file.
 */
/*
function search_api_glossary_entity_type_alter(array &$entity_types) {
  ksm($entity_types['node']);
}
*/
use Drupal\Core\Field\BaseFieldDefinition;

use Drupal\Core\Form\FormStateInterface;
//use Drupal\Core\Form\ConfigFormBase;
use Drupal\field\Entity\FieldConfig;
use Drupal\Core\Entity\EntityTypeInterface;


/**
 * Implements hook_entity_base_field_info.
 */
function search_api_glossary_entity_base_field_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type) {
  // @TODO loop through the settings
  if ($entity_type->id() == 'node') {
    $fields = array();
    $fields['mymodule_text'] = BaseFieldDefinition::create('string')
      ->setLabel(t('The text'))
      ->setDescription(t('A text property added by mymodule.'))
      ->setTranslatable(FALSE)
      ->setRevisionable(FALSE)
      ->setSetting('max_length', 3)
      ->setReadOnly(TRUE)
      ->setComputed(TRUE)
      ->setDefaultValue('');
    return $fields;
  }
}


/**
 * Implements hook_search_api_index_items_alter.
 */
function search_api_glossary_search_api_index_items_alter(\Drupal\search_api\IndexInterface $index, array &$items) {
  //ksm(array($index, $items));
  foreach ($items as $item) {
    // Get values from source field.
    // @TODO Maybe step through the array for value
    $source_field_value = $item->getField('title')->getValues()[0];

    // Glossary process
    $glossary_value = search_api_glossary_glossary_getter($source_field_value);

    // @TODO Check if the glossary fields exisit
    // Set the title.
    //$item->getField('mymodule_text')->addValue($glossary_value);
  }
}


/**
 * Getter callback for title_az_glossary property.
 */
function search_api_glossary_glossary_getter($source_value) {
  $first_letter = strtoupper($source_value)[0];
  return search_api_glossary_glossary_getter_helper($first_letter, array());
}

/**
 * Getter Helper for Alpha Numeric Keys.
 */
function search_api_glossary_glossary_getter_helper($first_letter, $glossary_az_grouping) {
  $key = $first_letter;

  // Is it Alpha?
  // Do we have Alpha grouping?
  if (ctype_alpha($first_letter) && in_array('glossary_az_grouping_az', $glossary_az_grouping)) {
    $first_letter = "A-Z";
  }
  // Is it a number?
  // Do we have Numeric grouping?
  elseif (ctype_digit($first_letter) && in_array('glossary_az_grouping_09', $glossary_az_grouping)) {
    $first_letter = "0-9";
  }
  // Catch non alpha numeric.
  // Do we have Non Alpha Numeric grouping?
  elseif (in_array('glossary_az_grouping_other', $glossary_az_grouping)) {
    $first_letter = "#";
  }

  // All done, return the key
  return $first_letter;
}







/**
 * Add search_api_glossary settings to Search API Index configuration.
 * Implements hook_form_FORM_ID_alter()
 * @see \Drupal\search_api\Form\IndexFieldsForm method buildForm at /modules/search_api/src/Form/IndexFieldsForm.php
 */
function search_api_glossary_form_search_api_index_fields_alter(&$form, FormStateInterface $form_state) {
  $config = \Drupal::config('search_api_glossary.settings');
  $entity = $form_state->getFormObject()->getEntity();

  // @TODO Check if there are any limitations,
  // If not, maybe expand this in future.
  $allowed_field_types = array(
    'integer',
    'text',
    'string',
  );

  foreach ($entity->getDatasources() as $datasource_id => $datasource) {
    $fields = $entity->getFieldsByDatasource($datasource_id);

    foreach ($fields as $field) {
      $field_settings_array = $field->getSettings();

      $datasource_id = $field_settings_array['datasource_id'];
      $datasource_id_clean = str_replace('entity:', '', $datasource_id);
      $field_name = $field_settings_array['property_path'];
      $field_label = $field_settings_array['label'];
      $field_type = $field_settings_array['type'];
      $locked = $field->isTypeLocked();

      // @TODO identify glossary fields and skip them.
      if ($field_name != 'field_new_glossary_az') {

        if (!$locked && in_array($field_type, $allowed_field_types)) {
          //ksm($field_name);

          $form[$datasource_id]['fields'][$field_name]['glossary_az'] = array(
            '#type' => 'checkbox',
            '#title' => t('Enable'),
            '#default_value' => $config->get($field_name),
          );

          //ksm($field_instance->getDataDefinition()->getFieldDefinition()->toArray());
          // Array to identify which header(s) to alter.
          $datasource_ids[$datasource_id] = $datasource_id;
        }
      }
    }
  }

  ksm($form);

  // Add glossary header to each fieldset.
  foreach ($datasource_ids as $datasource_id_unique) {
    $form[$datasource_id_unique]['#header'][] = t('Glossary AZ');
  }

  // Add a custom submit handler to save the array of types back to the config file.
  $form['actions']['submit']['#submit'][] = 'search_api_glossary_search_api_index_fields_submit';





/*
  $field_instances = $entity->get('fieldInstances');
  //ksm($field_instances);
  $datasource_ids = array();

  $config = \Drupal::config('search_api_glossary.settings');

  foreach ($field_instances as $field_instance) {
    //Set the allowed fields
    $field_name = $field_instance->getFieldIdentifier();
    $field_label = $field_instance->getLabel();
    $field_type = $field_instance->getType();
    $datasource_id = $field_instance->getDatasourceId();
    $datasource_id_clean = NULL;

    if ($datasource_id) {
      $datasource_id_clean = str_replace('entity:', '', $datasource_id);
    }

    $locked = $field_instance->isTypeLocked();

    //ksm($field_instance);
  }*/



  //$entity = \Drupal::entityManager()->getStorage('field_config');
  //ksm($entity);
  //$entity_type = \Drupal::entityManager()->getDefinition('node');
  //ksm($entity_type);
  //$foo  = \Drupal::entityManager()->getFieldDefinitions('node', 'article');
  //ksm($foo);

  //$field_info = FieldConfig::loadByName('node', 'article', 'field_new_glossary_az');
  //$field_info = FieldConfig::load('node.article.field_new_glossary_az');
  //ksm($field_info);

  /*
  $field_instance = array(
    'field_name' => 'field_new_glossary_az',
    'entity_type' => 'node',
    //'bundle' => 'page',
    //'bundles' => $bundles,
    'label' => 'Glossary AZ for Title',
    'translatable' => FALSE,
  );

  $field = \Drupal::entityManager()->getStorage('field_config')->create($field_instance);
  $field->save();*/
  //ksm(\Drupal::entityManager()->getStorage('field_config')->load('node.page.field_new_glossary_az'));

}


function search_api_glossary_search_api_index_fields_submit($form, FormStateInterface $form_state) {
  $values = $form_state->getValues();
  $fields = $values['fields'];

  $entity = $form_state->getFormObject()->getEntity();
  $field_settings = $entity->get('field_settings');
  $datasource_settings = $entity->get('datasource_settings');
  //ksm($field_settings);
  //ksm($datasource_settings);

  $config = \Drupal::configFactory()->getEditable('search_api_glossary.settings');

  foreach ($fields as $field_name => $field_values) {
    $field_type = $field_values['type'];

    if (isset($field_values['glossary_az']) && ($field_type == 'integer' || $field_type == 'text' || $field_type == 'string')) {
      // Set the variables.
      $config->set($field_name, $field_values['glossary_az'])->save();

      // If this is a node entity, there maybe a bundle
      $bundles = array();
      if ($datasource_settings[$field_settings[$field_type]['datasource_id']]['settings']['bundles']) {
        $bundles = $datasource_settings[$field_settings[$field_type]['datasource_id']]['settings']['bundles'];
      }

      $entity_type_clean = str_replace('entity:', '', $field_settings[$field_type]['datasource_id']);
      //TODO: Check if field already exists
      $field_instance = array(
        'field_name' => 'field_new_glossary_az',
        'entity_type' => $entity_type_clean,
        'bundle' => 'page',
        'bundles' => $bundles,
        'label' => 'Glossary AZ for ' . $field_settings[$field_type]['label'],
        'translatable' => FALSE,
      );

      //search_api_glossary_field_instance_create($field_instance);
    }
    else {
      // Clear the unused variable choices.
      $config->clear($field_name)->save();
    }
  }

  // Get info about the selected field
  //$foo = \Drupal::entityManager()->getDefinition('node');


//$field_settings[$field_name]


}
