<?php


/**
 * Implements hook_entity_property_info() on top of node module.
 *
 * @see entity_entity_property_info()
 */
function search_api_glossary_entity_property_info() {
  $info = array();
  
  // Add meta-data about the basic node properties.
  $properties = &$info['node']['properties'];

  $properties['title_az_glossary'] = array(
    'label' => t("Title A-Z Glossary"),
    'type' => 'text',
    'description' => t("The A-Z Glossary from title of the node."),
    'getter callback' => 'search_api_glossary_title_getter_callback',
    'schema field' => 'az_title',
    'sanitized' => TRUE,
  );

  $properties['name_az_glossary'] = array(
    'label' => t("Author Name A-Z Glossary"),
    'type' => 'text',
    'description' => t("The A-Z Glossary from Author Name of the node."),
    'getter callback' => 'search_api_glossary_name_getter_callback',
    'schema field' => 'az_name',
    'sanitized' => TRUE,
  );

  return $info;
}


/**
 * Getter callback for title_az_glossary property.
 */
function search_api_glossary_title_getter_callback($node, $name) {
  $key = strtoupper($node->title[0]);
  return $key;
}


/**
 * Getter callback for name_az_glossary property.
 */
function search_api_glossary_name_getter_callback($node, $name) {
  $first_letter = strtoupper($node->name[0]);
  $key = search_api_glossary_getter_helper($first_letter);
  return $key;
}


/**
 * Getter Helper for Alpha Numeric Keys
 */
function search_api_glossary_getter_helper($first_letter) {
  $letters_array = range('A', 'Z');
  $numbers_array = range(0, 9);
  
  $key = "";
  
  // it is alpha?
  if (ctype_alpha($first_letter)) {
    $key = $first_letter;
  }
  // is it a number
  elseif (ctype_digit($first_letter)) {
    $key = "0-9";
  }
  // catch all
  else {
    $key = "#";
  }
  
  return $key;
}