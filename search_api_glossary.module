<?php
/**
 * @file
 * Search api glossary module file.
 */

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\search_api\IndexInterface;

/**
 * Implements hook_entity_base_field_info().
 */
function search_api_glossary_entity_base_field_info(EntityTypeInterface $entity_type) {
  // Load up config and loop though settings.
  $config = \Drupal::config('search_api_glossary.settings');
  $search_api_glossary_settings = $config->get();

  if (!empty($search_api_glossary_settings)) {
    // Loop through the saved config from.
    // Search API field settings form.
    foreach ($search_api_glossary_settings as $key => $value) {

      // Create the fields.
      if ($entity_type->id() == $value['entity_type'] && $value['enabled'] == 1) {
        $fields = array();
        $fields[$value['glossary_field_id']] = BaseFieldDefinition::create('string')
          ->setLabel(t($value['glossary_field_name']))
          ->setDescription(t($value['glossary_field_desc']))
          ->setTranslatable(FALSE)
          ->setRevisionable(FALSE)
          ->setSetting('max_length', 3)
          ->setReadOnly(TRUE)
          ->setComputed(TRUE)
          ->setDefaultValue('');

        return $fields;
      }
    }
  }

}

/**
 * Implements hook_search_api_index_items_alter().
 */
function search_api_glossary_search_api_index_items_alter(IndexInterface $index, array &$items) {
  // Load up config and loop though settings.
  $config = \Drupal::config('search_api_glossary.settings');
  $search_api_glossary_settings = $config->get();

  foreach ($items as $item) {
    $item_fields = $item->getFields();

    // Loop through all fields.
    foreach ($item_fields as $field_name => $field_values) {
      // Only operate on genuine fields that are enabled.
      if (array_key_exists($field_name, $search_api_glossary_settings) && $search_api_glossary_settings[$field_name]['enabled'] == 1) {
        $source_field_value = $field_values->getValues()[0];

        // Glossary process.
        $glossary_value = search_api_glossary_glossary_getter($source_field_value);
        $target_field_id = $search_api_glossary_settings[$field_name]['glossary_field_id'];

        // Set the Target Glossary value.
        $item->getField($target_field_id)->addValue($glossary_value);
      }
    }
  }
}

/**
 * Getter callback for title_az_glossary property.
 */
function search_api_glossary_glossary_getter($source_value) {
  $first_letter = strtoupper($source_value)[0];
  return search_api_glossary_glossary_getter_helper($first_letter, array());
}

/**
 * Getter Helper for Alpha Numeric Keys.
 */
function search_api_glossary_glossary_getter_helper($first_letter, $glossary_az_grouping) {
  // @todo Enable group options.
  // Is it Alpha?
  // Do we have Alpha grouping?
  if (ctype_alpha($first_letter) && in_array('glossary_az_grouping_az', $glossary_az_grouping)) {
    $first_letter = "A-Z";
  }
  // Is it a number?
  // Do we have Numeric grouping?
  elseif (ctype_digit($first_letter) && in_array('glossary_az_grouping_09', $glossary_az_grouping)) {
    $first_letter = "0-9";
  }
  // Catch non alpha numeric.
  // Do we have Non Alpha Numeric grouping?
  elseif (in_array('glossary_az_grouping_other', $glossary_az_grouping)) {
    $first_letter = "#";
  }

  // All done, return the key.
  return $first_letter;
}

/**
 * Add search_api_glossary settings to Search API Index configuration.
 * Implements hook_form_FORM_ID_alter()
 */
function search_api_glossary_form_search_api_index_fields_alter(&$form, FormStateInterface $form_state) {
  $config = \Drupal::config('search_api_glossary.settings');
  $entity = $form_state->getFormObject()->getEntity();

  // @todo Check if there are any limitations.
  // If not, maybe expand this in future.
  $allowed_field_types = array(
    'integer',
    'text',
    'string',
  );

  foreach ($entity->getDatasources() as $datasource_id => $datasource) {
    $fields = $entity->getFieldsByDatasource($datasource_id);

    foreach ($fields as $field) {
      $field_settings_array = $field->getSettings();

      $datasource_id = $field_settings_array['datasource_id'];
      $datasource_id_clean = str_replace('entity:', '', $datasource_id);
      $field_name = $field_settings_array['property_path'];
      $field_label = $field_settings_array['label'];
      $field_type = $field_settings_array['type'];
      $locked = $field->isTypeLocked();

      // Identify glossary fields and skip them.
      // Glossary field should be excluded always.
      // Make it default and prevent changing.
      if (substr($field_name, 0, strlen('field_glossaryaz')) !== 'field_glossaryaz') {
        if (!$locked && in_array($field_type, $allowed_field_types)) {
          $form[$datasource_id]['fields'][$field_name]['glossary_az'] = array(
            '#type' => 'checkbox',
            '#title' => t('Enable'),
            '#default_value' => $config->get($field_name)['enabled'],
          );

          // @todo Add grouping settings
          // @todo Glossary field TYPE should always be STRING.

          // Array to identify which header(s) to alter.
          $datasource_ids[$datasource_id] = $datasource_id;
        }

      }
    }
  }

  // Add glossary header to each fieldset.
  foreach ($datasource_ids as $datasource_id_unique) {
    $form[$datasource_id_unique]['#header'][] = t('Glossary AZ');
  }

  // Add a custom submit handler to save the
  // array of types back to the config file.
  $form['actions']['submit']['#submit'][] = 'search_api_glossary_search_api_index_fields_submit';
}

function search_api_glossary_search_api_index_fields_submit($form, FormStateInterface $form_state) {
  $values = $form_state->getValues();
  $fields = $values['fields'];

  $entity = $form_state->getFormObject()->getEntity();
  $field_settings_array = $entity->get('field_settings');

  $config = \Drupal::configFactory()->getEditable('search_api_glossary.settings');

  //$clear_cache = FALSE;

  foreach ($fields as $field_name => $field_values) {
    $entity_type_clean = str_replace('entity:', '', $field_settings_array[$field_name]['datasource_id']);

    $config_values = array(
      'enabled' => 0,
      'entity_type' => $entity_type_clean,
      'field_type' => $field_values['type'],
      'field_name' => $field_name,
      'label' => $field_settings_array[$field_name]['label'],
      'glossary_field_id' => 'field_glossaryaz_' . $entity_type_clean . '_' . $field_name,
      'glossary_field_name' => $field_settings_array[$field_name]['label'] . ' Glossary',
      'glossary_field_desc' => 'Glossary field for ' . $field_settings_array[$field_name]['label'] . '.',
    );

    if (isset($field_values['glossary_az']) && $field_values['glossary_az'] == 1) {
      $config_values['enabled'] = 1;

      // If Glossary option is enabled
      // on any of the fields, clear cache
      // So these fields can be added in
      // hook_entity_base_field_info().
      // @todo Only clear caches if new
      // options are selected. Avoid repeat flushing.
      //$clear_cache = TRUE;

      // Set the variables.
      $config->set($field_name, $config_values)->save();
      $config->set($config_values['glossary_field_id'], $config_values)->save();
    }
    else {
      // Clear the unused variable choices.
      $config->clear($field_name)->save();
      $config->clear($config_values['glossary_field_id'])->save();
    }

    // @todo Somehow mark the removed fields,
    // so they can be removed in
    // hook_entity_base_field_info().
    // Maybe hook into field remove?

    // @todo When parent field is removed,
    // Hook somewhere and remove the corresponding
    // Glossary field too.
  }

  // Clear caches.
  try {
    // @todo Make this lighter?
    drupal_flush_all_caches();
    drupal_set_message(t("Glossary fields have been created for the chosen fields. These newly created Glossary fields can now be added by clicking on ADD FIELDS button."));
  }
  catch (Exception $e) {
    drupal_set_message(t("Cache was not cleared, you must clear your cache manually to see the new glossary fields"));
  }

}
